// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Product {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  description       String?
  category          String?
  categoryId        String?
  unitPrice         Float               @default(0)
  minimumStock      Int                 @default(0)
  currentStock      Int                 @default(0)
  location          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String?
  user              User?               @relation(fields: [userId], references: [id])
  productCategory   ProductCategory?    @relation(fields: [categoryId], references: [id])
  stockMovements    StockMovement[]
  auditItems        InventoryAuditItem[]
}

model StockMovement {
  id                String              @id @default(cuid())
  type              String              // Values: ACHAT, PRODUCTION, VENTE, UTILISATION_INTERNE, AJUSTEMENT, RETOUR, PERTE
  quantity          Int
  reason            String?
  notes             String?
  date              DateTime            @default(now())
  productId         String
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId            String?
  createdAt         DateTime            @default(now())
}

model InventoryAudit {
  id                String              @id @default(cuid())
  date              DateTime            @default(now())
  status            String              // Values: PENDING, APPROVED, REJECTED
  notes             String?
  userId            String?
  reviewerId        String?
  items             InventoryAuditItem[]
  user              User?               @relation("AuditCreator", fields: [userId], references: [id])
  reviewer          User?               @relation("AuditReviewer", fields: [reviewerId], references: [id])
  history           InventoryAuditHistory[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

}

model InventoryAuditItem {
  id                String              @id @default(cuid())
  theoreticalStock  Int
  actualStock       Int
  difference        Int
  notes             String?
  productId         String
  auditId           String
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  audit             InventoryAudit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
}

model InventoryAuditHistory {
  id                String              @id @default(cuid())
  auditId           String
  action            String              // Values: CREATED, APPROVED, REJECTED, ITEM_ADDED, ITEM_UPDATED, ITEM_REMOVED
  oldValue          String?
  newValue          String?
  userId            String?
  audit             InventoryAudit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  user              User?               @relation(fields: [userId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  role              String              @default("USER") // Values: ADMIN, USER
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  products          Product[]
  createdAudits     InventoryAudit[]    @relation("AuditCreator")
  reviewedAudits    InventoryAudit[]    @relation("AuditReviewer")
  auditHistory      InventoryAuditHistory[]
  companySettings   CompanySettings[]
  appPreferences    AppPreferences[]
  notificationSettings NotificationSettings[]
}

model CompanySettings {
  id                String    @id @default(cuid())
  name              String
  email             String
  address           String
  phone             String
  logo              String?
  currency          String    @default("EUR")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
}

model AppPreferences {
  id                String    @id @default(cuid())
  theme             String    @default("light")
  language          String    @default("fr")
  dateFormat        String    @default("DD/MM/YYYY")
  timeFormat        String    @default("24h")
  itemsPerPage      Int       @default(10)
  currency          String    @default("EUR")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                String    @id @default(cuid())
  lowStockAlert     Boolean   @default(true)
  lowStockThreshold Int       @default(10)
  emailNotifications Boolean   @default(true)
  pushNotifications Boolean   @default(true)
  stockAlerts       Boolean   @default(true)
  criticalAlerts    Boolean   @default(true)
  expiryAlerts      Boolean   @default(false)
  emailEnabled      Boolean   @default(true)
  appEnabled        Boolean   @default(true)
  smsEnabled        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
}

model ProductCategory {
  id                String    @id @default(cuid())
  name              String    @unique
  description       String?
  website           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  products          Product[]
}

model BackupSettings {
  id                String    @id @default(cuid())
  autoBackupEnabled Boolean   @default(true)
  frequency         String    @default("daily") // Values: daily, weekly, monthly
  retentionPeriod   Int       @default(30)      // Number of days
  lastBackupAt      DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Backup {
  id                String    @id @default(cuid())
  filename          String
  size              Int
  type              String    // Values: manual, automatic
  status            String    // Values: pending, completed, failed
  createdAt         DateTime  @default(now())
  completedAt       DateTime?
}