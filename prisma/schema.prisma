// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Product {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  description       String?
  category          String?
  unitPrice         Float               @default(0)
  minimumStock      Int                 @default(0)
  currentStock      Int                 @default(0)
  location          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String?
  user              User?               @relation(fields: [userId], references: [id])
  stockMovements    StockMovement[]
  auditItems        InventoryAuditItem[]
}

model StockMovement {
  id                String              @id @default(cuid())
  type              String              // Values: ACHAT, PRODUCTION, VENTE, UTILISATION_INTERNE, AJUSTEMENT, RETOUR, PERTE
  quantity          Int
  reason            String?
  notes             String?
  date              DateTime            @default(now())
  productId         String
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId            String?
  createdAt         DateTime            @default(now())
}

model InventoryAudit {
  id                String              @id @default(cuid())
  date              DateTime            @default(now())
  status            String              // Values: PENDING, APPROVED, REJECTED
  notes             String?
  userId            String?
  reviewerId        String?
  items             InventoryAuditItem[]
  user              User?               @relation("AuditCreator", fields: [userId], references: [id])
  reviewer          User?               @relation("AuditReviewer", fields: [reviewerId], references: [id])
  history           InventoryAuditHistory[]
  createdAt         DateTime            @default(now())
}

model InventoryAuditItem {
  id                String              @id @default(cuid())
  theoreticalStock  Int
  actualStock       Int
  difference        Int
  notes             String?
  productId         String
  auditId           String
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  audit             InventoryAudit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
}

model InventoryAuditHistory {
  id                String              @id @default(cuid())
  auditId           String
  action            String              // Values: CREATED, APPROVED, REJECTED, ITEM_ADDED, ITEM_UPDATED, ITEM_REMOVED
  oldValue          String?
  newValue          String?
  userId            String?
  audit             InventoryAudit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  user              User?               @relation(fields: [userId], references: [id])
  createdAt         DateTime            @default(now())
}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  role              String              @default("USER") // Values: ADMIN, USER
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  products          Product[]
  createdAudits     InventoryAudit[]    @relation("AuditCreator")
  reviewedAudits    InventoryAudit[]    @relation("AuditReviewer")
  auditHistory      InventoryAuditHistory[]
}